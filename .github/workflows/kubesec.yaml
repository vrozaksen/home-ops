# üîí Kubesec Security Scanner
# Automated security analysis for Kubernetes manifests
# This workflow uses actions that are not certified by GitHub.

name: üîí Home-Ops Security Analysis

on:
  push:
    branches: [ "main" ]
    paths:
      - "kubernetes/**/*.yaml"
      - "kubernetes/**/*.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - "kubernetes/**/*.yaml"
      - "kubernetes/**/*.yml"
  schedule:
    - cron: '26 23 * * 1'
  workflow_dispatch:

jobs:
  security-scan:
    name: üõ°Ô∏è GitOps Security Analysis
    runs-on: home-ops-runner
    permissions:
      actions: read
      contents: read
      security-events: write
      pull-requests: write

    steps:
      - name: üì• Checkout Repository
        # renovate: datasource=github-tags depName=actions/checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: üîç Discover GitOps Manifests
        id: discover
        run: |
          echo "üîç Discovering GitOps manifests for security analysis..."

          # Find all YAML files in the repository
          find kubernetes/ \
            \( -name "*.yaml" -o -name "*.yml" \) \
            ! -name "kustomization.yaml" \
            ! -name "kustomization.yml" \
            ! -path "*/flux-system/*" \
            > all_manifests.txt

          TOTAL_COUNT=$(wc -l < all_manifests.txt)
          echo "üìä Found $TOTAL_COUNT YAML files total"
          echo "total_manifests=$TOTAL_COUNT" >> $GITHUB_OUTPUT

          # Categorize files by type
          echo "üîç Analyzing manifest types..."

          # HelmReleases
          HELM_COUNT=$(grep -l "kind:\s*HelmRelease" kubernetes/**/*.yaml kubernetes/**/*.yml 2>/dev/null | wc -l || echo "0")
          echo "helmrelease_count=$HELM_COUNT" >> $GITHUB_OUTPUT

          # Kustomizations
          KUSTOMIZATION_COUNT=$(grep -l "kind:\s*Kustomization" kubernetes/**/*.yaml kubernetes/**/*.yml 2>/dev/null | wc -l || echo "0")
          echo "kustomization_count=$KUSTOMIZATION_COUNT" >> $GITHUB_OUTPUT

          # ExternalSecrets
          EXTERNALSECRET_COUNT=$(grep -l "kind:\s*ExternalSecret" kubernetes/**/*.yaml kubernetes/**/*.yml 2>/dev/null | wc -l || echo "0")
          echo "externalsecret_count=$EXTERNALSECRET_COUNT" >> $GITHUB_OUTPUT

          echo "üìä Manifest breakdown:"
          echo "  üì¶ HelmReleases: $HELM_COUNT"
          echo "  üîß Kustomizations: $KUSTOMIZATION_COUNT"
          echo "  üîê ExternalSecrets: $EXTERNALSECRET_COUNT"

          if [ $TOTAL_COUNT -eq 0 ]; then
            echo "scan_needed=false" >> $GITHUB_OUTPUT
          else
            echo "scan_needed=true" >> $GITHUB_OUTPUT
          fi

          rm -f all_manifests.txt

      - name: üîí Initialize Security Scan
        id: init
        if: steps.discover.outputs.scan_needed == 'true'
        run: |
          echo "üîí Running custom Home-Ops security analysis..."

          # Initialize counters
          echo "0" > critical_count.txt
          echo "0" > warning_count.txt
          echo "0" > info_count.txt
          echo "0" > privileged_count.txt
          echo "0" > host_network_count.txt
          echo "0" > root_users_count.txt

          # Initialize result files
          touch security_issues.txt
          touch warnings.txt
          touch info_items.txt

      - name: üì¶ Analyze HelmRelease Security
        if: steps.discover.outputs.scan_needed == 'true'
        run: |
          echo "üîç Analyzing HelmRelease configurations..."

          CRITICAL_COUNT=$(cat critical_count.txt)
          WARNING_COUNT=$(cat warning_count.txt)
          INFO_COUNT=$(cat info_count.txt)

          # Check for insecure HelmRelease configurations - ONLY in HelmRelease files
          while IFS= read -r helmrelease; do
            echo "üì¶ Scanning HelmRelease: $helmrelease"

            # Verify this is actually a HelmRelease by checking content (strict match)
            if ! grep -q "^\s*kind:\s*HelmRelease" "$helmrelease" 2>/dev/null; then
              echo "‚è≠Ô∏è Skipping $helmrelease - not a HelmRelease"
              continue
            fi

            # Check for missing security contexts in values
            if ! grep -q "securityContext\|runAsNonRoot\|runAsUser" "$helmrelease" 2>/dev/null; then
              echo "$helmrelease: No securityContext found in HelmRelease values" >> warnings.txt
              WARNING_COUNT=$((WARNING_COUNT + 1))
            fi

            # Check for missing resource limits
            if ! grep -q "resources:\|limits:\|requests:" "$helmrelease" 2>/dev/null; then
              echo "$helmrelease: No resource limits specified in HelmRelease" >> warnings.txt
              WARNING_COUNT=$((WARNING_COUNT + 1))
            fi

            # Check for potential privileged access
            if grep -q "privileged.*true\|allowPrivilegeEscalation.*true" "$helmrelease" 2>/dev/null; then
              echo "$helmrelease: Privileged container configuration detected in HelmRelease" >> security_issues.txt
              CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
            fi

            # Check for hostNetwork
            if grep -q "hostNetwork.*true" "$helmrelease" 2>/dev/null; then
              echo "$helmrelease: Host network access enabled in HelmRelease" >> security_issues.txt
              CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
            fi

            # Check for hostPath volumes
            if grep -q "hostPath:" "$helmrelease" 2>/dev/null; then
              echo "$helmrelease: Host path volume detected in HelmRelease" >> warnings.txt
              WARNING_COUNT=$((WARNING_COUNT + 1))
            fi

            # Check for latest image tags
            if grep -q "tag:\s*['\"]latest['\"]" "$helmrelease" 2>/dev/null; then
              echo "$helmrelease: Using 'latest' image tag in HelmRelease - use specific versions" >> warnings.txt
              WARNING_COUNT=$((WARNING_COUNT + 1))
            fi

          done < <(find kubernetes/ -name "*.yaml" -exec grep -l "^\s*kind:\s*HelmRelease" {} \; 2>/dev/null)

          echo "$CRITICAL_COUNT" > critical_count.txt
          echo "$WARNING_COUNT" > warning_count.txt
          echo "$INFO_COUNT" > info_count.txt

      - name: üîó Analyze Flux Source Security
        if: steps.discover.outputs.scan_needed == 'true'
        run: |
          echo "üîç Analyzing Flux Source Security..."

          CRITICAL_COUNT=$(cat critical_count.txt)
          WARNING_COUNT=$(cat warning_count.txt)
          INFO_COUNT=$(cat info_count.txt)

          # Check HelmRepository sources
          while IFS= read -r helmrepo; do
            echo "üì¶ Scanning HelmRepository: $helmrepo"

            # Verify this is actually a HelmRepository by checking content (strict match)
            if ! grep -q "^\s*kind:\s*HelmRepository" "$helmrepo" 2>/dev/null; then
              echo "‚è≠Ô∏è Skipping $helmrepo - not a HelmRepository"
              continue
            fi

            # Check for HTTPS URLs
            if ! grep -q "url:\s*https://" "$helmrepo" 2>/dev/null; then
              echo "$helmrepo: HelmRepository not using HTTPS" >> security_issues.txt
              CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
            fi

            # Check for signature verification
            if ! grep -q "verify:\|secretRef:" "$helmrepo" 2>/dev/null; then
              echo "$helmrepo: No signature verification configured" >> warnings.txt
              WARNING_COUNT=$((WARNING_COUNT + 1))
            fi

          done < <(find kubernetes/ -name "*.yaml" -exec grep -l "^\s*kind:\s*HelmRepository" {} \; 2>/dev/null)

          # Check GitRepository sources
          while IFS= read -r gitrepo; do
            echo "üìÇ Scanning GitRepository: $gitrepo"

            # Verify this is actually a GitRepository by checking content (strict match)
            if ! grep -q "^\s*kind:\s*GitRepository" "$gitrepo" 2>/dev/null; then
              echo "‚è≠Ô∏è Skipping $gitrepo - not a GitRepository"
              continue
            fi

            # Check for HTTPS URLs
            if ! grep -q "url:\s*https://" "$gitrepo" 2>/dev/null; then
              echo "$gitrepo: GitRepository not using HTTPS" >> security_issues.txt
              CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
            fi

            # Check for GPG verification
            if ! grep -q "verify:\|secretRef:" "$gitrepo" 2>/dev/null; then
              echo "$gitrepo: No GPG verification configured" >> warnings.txt
              WARNING_COUNT=$((WARNING_COUNT + 1))
            fi

          done < <(find kubernetes/ -name "*.yaml" -exec grep -l "^\s*kind:\s*GitRepository" {} \; 2>/dev/null)

          # Check OCIRepository sources
          while IFS= read -r ocirepo; do
            echo "üê≥ Scanning OCIRepository: $ocirepo"

            # Verify this is actually an OCIRepository by checking content (strict match)
            if ! grep -q "^\s*kind:\s*OCIRepository" "$ocirepo" 2>/dev/null; then
              echo "‚è≠Ô∏è Skipping $ocirepo - not an OCIRepository"
              continue
            fi

            # Check for signature verification
            if ! grep -q "verify:" "$ocirepo" 2>/dev/null; then
              echo "$ocirepo: No OCI signature verification configured - add verify section with cosign provider" >> warnings.txt
              WARNING_COUNT=$((WARNING_COUNT + 1))
            fi

          done < <(find kubernetes/ -name "*.yaml" -exec grep -l "^\s*kind:\s*OCIRepository" {} \; 2>/dev/null)

          echo "$CRITICAL_COUNT" > critical_count.txt
          echo "$WARNING_COUNT" > warning_count.txt
          echo "$INFO_COUNT" > info_count.txt

      - name: üîê Analyze ExternalSecret Security
        if: steps.discover.outputs.scan_needed == 'true'
        run: |
          echo "üîç Analyzing ExternalSecret configurations..."

          CRITICAL_COUNT=$(cat critical_count.txt)
          WARNING_COUNT=$(cat warning_count.txt)
          INFO_COUNT=$(cat info_count.txt)

          # Check ExternalSecret security
          while IFS= read -r externalsecret; do
            echo "üîê Scanning ExternalSecret: $externalsecret"

            # Verify this is actually an ExternalSecret by checking content (strict match)
            if ! grep -q "^\s*kind:\s*ExternalSecret" "$externalsecret" 2>/dev/null; then
              echo "‚è≠Ô∏è Skipping $externalsecret - not an ExternalSecret"
              continue
            fi

            # Check for proper secret store references
            if ! grep -q "secretStoreRef\|clusterSecretStoreRef" "$externalsecret" 2>/dev/null; then
              echo "$externalsecret: Missing secret store reference" >> warnings.txt
              WARNING_COUNT=$((WARNING_COUNT + 1))
            fi

          done < <(find kubernetes/ -name "*.yaml" -exec grep -l "^\s*kind:\s*ExternalSecret" {} \; 2>/dev/null)

          echo "$CRITICAL_COUNT" > critical_count.txt
          echo "$WARNING_COUNT" > warning_count.txt
          echo "$INFO_COUNT" > info_count.txt

      - name: üõ°Ô∏è Analyze RBAC Security
        if: steps.discover.outputs.scan_needed == 'true'
        run: |
          echo "üõ°Ô∏è Performing RBAC Security Analysis..."

          CRITICAL_COUNT=$(cat critical_count.txt)
          WARNING_COUNT=$(cat warning_count.txt)
          INFO_COUNT=$(cat info_count.txt)

          # Check ServiceAccounts and Roles
          while IFS= read -r rbacfile; do
            echo "üîë Scanning RBAC: $rbacfile"

            # Verify this is actually an RBAC resource by checking content (strict match)
            if ! grep -q "^\s*kind:\s*\(Role\|ClusterRole\|RoleBinding\|ClusterRoleBinding\|ServiceAccount\)" "$rbacfile" 2>/dev/null; then
              echo "‚è≠Ô∏è Skipping $rbacfile - not an RBAC resource"
              continue
            fi

            # Check for wildcard permissions
            if grep -q "resources:\s*\[.*\*.*\]" "$rbacfile" 2>/dev/null; then
              echo "$rbacfile: Wildcard (*) permissions detected" >> security_issues.txt
              CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
            fi

            # Check for cluster-admin role
            if grep -q "cluster-admin" "$rbacfile" 2>/dev/null; then
              echo "$rbacfile: cluster-admin role binding found" >> warnings.txt
              WARNING_COUNT=$((WARNING_COUNT + 1))
            fi

          done < <(find kubernetes/ -name "*.yaml" -exec grep -l "^\s*kind:\s*\(Role\|ClusterRole\|RoleBinding\|ClusterRoleBinding\|ServiceAccount\)" {} \; 2>/dev/null)

          echo "$CRITICAL_COUNT" > critical_count.txt
          echo "$WARNING_COUNT" > warning_count.txt
          echo "$INFO_COUNT" > info_count.txt

      - name: üîç Analyze Container Security
        if: steps.discover.outputs.scan_needed == 'true'
        run: |
          echo "ÔøΩ Analyzing container security patterns..."

          CRITICAL_COUNT=$(cat critical_count.txt)
          WARNING_COUNT=$(cat warning_count.txt)
          PRIVILEGED_COUNT=$(cat privileged_count.txt)
          HOST_NETWORK_COUNT=$(cat host_network_count.txt)
          ROOT_USER_COUNT=$(cat root_users_count.txt)

          # Check for hardcoded secrets/tokens
          if HARDCODED_SECRETS=$(grep -r -i -E "(password|token|key|secret):\s*['\"]?[a-zA-Z0-9]{8,}" kubernetes/ --include="*.yaml" --include="*.yml" 2>/dev/null | grep -v "secretRef\|valueFrom\|secretKeyRef" | head -5); then
            if [ ! -z "$HARDCODED_SECRETS" ]; then
              echo "kubernetes/: Potential hardcoded secrets detected in YAML files" >> security_issues.txt
              CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
            fi
          fi

          # Check for privileged containers
          if PRIVILEGED_FILES=$(grep -r -l "privileged.*true" kubernetes/ 2>/dev/null); then
            PRIVILEGED_COUNT=$(echo "$PRIVILEGED_FILES" | wc -l)
            echo "$PRIVILEGED_FILES" | while read -r file; do
              echo "$file: Privileged container configuration detected" >> security_issues.txt
              CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
            done
          fi

          # Check for hostNetwork usage
          if HOST_NETWORK_FILES=$(grep -r -l "hostNetwork.*true" kubernetes/ 2>/dev/null); then
            HOST_NETWORK_COUNT=$(echo "$HOST_NETWORK_FILES" | wc -l)
            echo "$HOST_NETWORK_FILES" | while read -r file; do
              echo "$file: Host network access enabled" >> security_issues.txt
              CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
            done
          fi

          # Check for root users
          if ROOT_USER_FILES=$(grep -r -l "runAsUser.*0" kubernetes/ 2>/dev/null); then
            ROOT_USER_COUNT=$(echo "$ROOT_USER_FILES" | wc -l)
            echo "$ROOT_USER_FILES" | while read -r file; do
              echo "$file: Container running as root user" >> warnings.txt
              WARNING_COUNT=$((WARNING_COUNT + 1))
            done
          fi

          echo "$CRITICAL_COUNT" > critical_count.txt
          echo "$WARNING_COUNT" > warning_count.txt
          echo "$PRIVILEGED_COUNT" > privileged_count.txt
          echo "$HOST_NETWORK_COUNT" > host_network_count.txt
          echo "$ROOT_USER_COUNT" > root_users_count.txt

      - name: üìã Generate SARIF Results
        id: sarif
        if: steps.discover.outputs.scan_needed == 'true'
        run: |
          echo "üìã Generating comprehensive SARIF results..."

          CRITICAL_COUNT=$(cat critical_count.txt)
          WARNING_COUNT=$(cat warning_count.txt)
          INFO_COUNT=$(cat info_count.txt)
          PRIVILEGED_COUNT=$(cat privileged_count.txt)
          HOST_NETWORK_COUNT=$(cat host_network_count.txt)
          ROOT_USER_COUNT=$(cat root_users_count.txt)

          SARIF_RESULTS=""

          # Function to create stable fingerprint
          create_fingerprint() {
            local file_path="$1"
            local message="$2"
            local rule_id="$3"
            echo "${rule_id}:${file_path}:${message}" | sha256sum | cut -d' ' -f1
          }

          # Process critical security issues
          if [ -f security_issues.txt ] && [ -s security_issues.txt ]; then
            while IFS= read -r issue; do
              if [[ "$issue" == *":"* ]]; then
                file_path=$(echo "$issue" | cut -d: -f1)
                message=$(echo "$issue" | cut -d: -f2- | sed 's/"/\\"/g' | sed 's/^ *//')

                # Only add if file exists and path is valid
                if [ -f "$file_path" ]; then
                  fingerprint=$(create_fingerprint "$file_path" "$message" "critical-security")
                  SARIF_RESULTS="$SARIF_RESULTS{\"ruleId\":\"critical-security\",\"level\":\"error\",\"message\":{\"text\":\"$message\"},\"locations\":[{\"physicalLocation\":{\"artifactLocation\":{\"uri\":\"$file_path\"},\"region\":{\"startLine\":1}}}],\"fingerprints\":{\"home-ops-security\":\"$fingerprint\"}},"
                fi
              fi
            done < security_issues.txt
          fi

          # Process warnings - only file-specific ones
          if [ -f warnings.txt ] && [ -s warnings.txt ]; then
            while IFS= read -r warning; do
              if [[ "$warning" == *":"* ]]; then
                file_path=$(echo "$warning" | cut -d: -f1)
                message=$(echo "$warning" | cut -d: -f2- | sed 's/"/\\"/g' | sed 's/^ *//')

                # Only add if file exists and path is valid
                if [ -f "$file_path" ]; then
                  fingerprint=$(create_fingerprint "$file_path" "$message" "security-warning")
                  SARIF_RESULTS="$SARIF_RESULTS{\"ruleId\":\"security-warning\",\"level\":\"warning\",\"message\":{\"text\":\"$message\"},\"locations\":[{\"physicalLocation\":{\"artifactLocation\":{\"uri\":\"$file_path\"},\"region\":{\"startLine\":1}}}],\"fingerprints\":{\"home-ops-security\":\"$fingerprint\"}},"
                fi
              fi
            done < warnings.txt
          fi

          # Remove trailing comma if results exist
          if [ ! -z "$SARIF_RESULTS" ]; then
            SARIF_RESULTS=${SARIF_RESULTS%,}
          fi

          # Add timestamp to make fingerprints more stable across runs
          SCAN_TIMESTAMP=$(date -u '+%Y%m%d')

          cat > security-results.sarif << EOF
          {
            "version": "2.1.0",
            "\$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "home-ops-security-scanner",
                    "version": "2.0.0",
                    "informationUri": "https://github.com/vrozaksen/home-ops",
                    "shortDescription": {
                      "text": "Custom GitOps security scanner for home-ops repository"
                    },
                    "properties": {
                      "scanTimestamp": "$SCAN_TIMESTAMP"
                    },
                    "rules": [
                      {
                        "id": "critical-security",
                        "name": "Critical Security Issue",
                        "shortDescription": {
                          "text": "Critical security configuration issue requiring immediate attention"
                        },
                        "defaultConfiguration": {
                          "level": "error"
                        },
                        "help": {
                          "text": "This rule identifies critical security misconfigurations in Kubernetes manifests that require immediate attention."
                        }
                      },
                      {
                        "id": "security-warning",
                        "name": "Security Warning",
                        "shortDescription": {
                          "text": "Security configuration warning that should be reviewed"
                        },
                        "defaultConfiguration": {
                          "level": "warning"
                        },
                        "help": {
                          "text": "This rule identifies security configurations that could be improved but are not immediately critical."
                        }
                      }
                    ]
                  }
                },
                "results": [$SARIF_RESULTS]
              }
            ]
          }
          EOF

          echo "‚úÖ Home-Ops security scan completed!"
          echo "üìä Security Analysis Complete"
          echo "üî¥ Critical Issues: $CRITICAL_COUNT"
          echo "üü° Warnings: $WARNING_COUNT"
          echo "‚ÑπÔ∏è  Info: $INFO_COUNT"

          # Output results for summary
          echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT
          echo "info_count=$INFO_COUNT" >> $GITHUB_OUTPUT
          echo "scanned_count=${{ steps.discover.outputs.total_manifests }}" >> $GITHUB_OUTPUT
          echo "privileged_containers=$PRIVILEGED_COUNT" >> $GITHUB_OUTPUT
          echo "host_network=$HOST_NETWORK_COUNT" >> $GITHUB_OUTPUT
          echo "root_users=$ROOT_USER_COUNT" >> $GITHUB_OUTPUT

          # Generate security summary
          ADDITIONAL_ISSUES=""
          if [ $PRIVILEGED_COUNT -gt 0 ]; then
            ADDITIONAL_ISSUES="${ADDITIONAL_ISSUES}Privileged containers: $PRIVILEGED_COUNT files; "
          fi
          if [ $HOST_NETWORK_COUNT -gt 0 ]; then
            ADDITIONAL_ISSUES="${ADDITIONAL_ISSUES}HostNetwork usage: $HOST_NETWORK_COUNT files; "
          fi
          if [ $ROOT_USER_COUNT -gt 0 ]; then
            ADDITIONAL_ISSUES="${ADDITIONAL_ISSUES}Root users: $ROOT_USER_COUNT files; "
          fi

          if [ -z "$ADDITIONAL_ISSUES" ]; then
            SECURITY_SUMMARY="‚úÖ All security checks passed"
          else
            SECURITY_SUMMARY="‚ö†Ô∏è Security issues found: $ADDITIONAL_ISSUES"
          fi
          echo "security_summary=$SECURITY_SUMMARY" >> $GITHUB_OUTPUT

      - name:  Generate Scan Summary
        if: steps.discover.outputs.scan_needed == 'true'
        run: |
          echo "## üîí Home-Ops Security Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üè† **Repository**: GitOps Home Operations" >> $GITHUB_STEP_SUMMARY
          echo "üìÅ **Analyzed**: ${{ steps.discover.outputs.total_manifests }} YAML manifests" >> $GITHUB_STEP_SUMMARY
          echo "üïí **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### üì¶ Manifest Breakdown" >> $GITHUB_STEP_SUMMARY
          echo "| Resource Type | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| ÔøΩ HelmReleases | ${{ steps.discover.outputs.helmrelease_count || '0' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîß Kustomizations | ${{ steps.discover.outputs.kustomization_count || '0' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîê ExternalSecrets | ${{ steps.discover.outputs.externalsecret_count || '0' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### üîç Security Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "| Severity | Count | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| üî¥ Critical | ${{ steps.sarif.outputs.critical_count || '0' }} | ${{ steps.sarif.outputs.critical_count == '0' && '‚úÖ None Found' || '‚ö†Ô∏è Requires Attention' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üü° Warnings | ${{ steps.sarif.outputs.warning_count || '0' }} | ${{ steps.sarif.outputs.warning_count == '0' && '‚úÖ None Found' || 'üí° Recommendations' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üü¢ Info | ${{ steps.sarif.outputs.info_count || '0' }} | ${{ steps.sarif.outputs.info_count == '0' && '‚úÖ None Found' || 'üìã Suggestions' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### üîç Specific Security Checks" >> $GITHUB_STEP_SUMMARY
          echo "| Security Check | Count | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Privileged Containers | ${{ steps.sarif.outputs.privileged_containers || '0' }} | ${{ steps.sarif.outputs.privileged_containers == '0' && '‚úÖ Safe' || '‚ö†Ô∏è Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Host Network Usage | ${{ steps.sarif.outputs.host_network || '0' }} | ${{ steps.sarif.outputs.host_network == '0' && '‚úÖ Safe' || '‚ö†Ô∏è Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Root User Containers | ${{ steps.sarif.outputs.root_users || '0' }} | ${{ steps.sarif.outputs.root_users == '0' && '‚úÖ Safe' || '‚ö†Ô∏è Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Security Status:** ${{ steps.sarif.outputs.security_summary || 'No security scan data available' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "üéØ **Scanner**: Custom Home-Ops GitOps Security Analysis" >> $GITHUB_STEP_SUMMARY
          echo "ÔøΩ **Runner**: home-ops-runner" >> $GITHUB_STEP_SUMMARY

      - name: üì§ Upload Security Results
        id: check_sarif
        if: steps.discover.outputs.scan_needed == 'true' && always()
        run: |
          # Check if we have any SARIF results to upload
          if [ -f "security-results.sarif" ]; then
            RESULT_COUNT=$(jq '.runs[0].results | length' security-results.sarif 2>/dev/null || echo "0")
            echo "üìä SARIF file contains $RESULT_COUNT security results"

            if [ "$RESULT_COUNT" -gt 0 ]; then
              echo "üì§ Uploading security results to GitHub Security tab..."
              echo "sarif_upload_needed=true" >> $GITHUB_OUTPUT
            else
              echo "‚è≠Ô∏è No security results to upload - skipping SARIF upload"
              echo "sarif_upload_needed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ùå SARIF file not found - skipping upload"
            echo "sarif_upload_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: üì§ Upload SARIF to GitHub Security
        if: steps.discover.outputs.scan_needed == 'true' && always() && steps.check_sarif.outputs.sarif_upload_needed == 'true'
        # renovate: datasource=github-tags depName=github/codeql-action
        uses: github/codeql-action/upload-sarif@4e828ff8d448a8a6e532957b1811f387a63867e8 # v3.29.4
        with:
          sarif_file: security-results.sarif
          category: home-ops-security

      - name: ‚ö†Ô∏è Skip Notification
        if: steps.discover.outputs.scan_needed == 'false'
        run: |
          echo "## üîí Home-Ops Security Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ÑπÔ∏è **No YAML manifests found to analyze**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This is unexpected for a GitOps repository. Please check:" >> $GITHUB_STEP_SUMMARY
          echo "- The kubernetes/ directory exists" >> $GITHUB_STEP_SUMMARY
          echo "- YAML files are present in the repository" >> $GITHUB_STEP_SUMMARY
          echo "- File permissions allow reading" >> $GITHUB_STEP_SUMMARY
