# üîí Kubesec Security Scanner
# Automated security analysis for Kubernetes manifests
# This workflow uses actions that are not certified by GitHub.

name: üîí Kubesec Security Analysis

on:
  push:
    branches: [ "main" ]
    paths:
      - "kubernetes/**/*.yaml"
      - "kubernetes/**/*.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - "kubernetes/**/*.yaml"
      - "kubernetes/**/*.yml"
  schedule:
    - cron: '26 23 * * 1'
  workflow_dispatch:

env:
  # renovate: datasource=github-releases depName=controlplaneio/kubesec
  KUBESEC_VERSION: "2.14.2"

jobs:
  security-scan:
    name: üõ°Ô∏è Kubernetes Security Scan
    runs-on: home-ops-runner
    permissions:
      actions: read
      contents: read
      security-events: write
      pull-requests: write

    steps:
      - name: üì• Checkout Repository
        # renovate: datasource=github-tags depName=actions/checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: üîç Discover Kubernetes Manifests
        id: discover
        run: |
          echo "üîç Discovering Kubernetes manifests..."

          # Find all relevant YAML files, excluding certain patterns
          find kubernetes/ \
            \( -name "*.yaml" -o -name "*.yml" \) \
            ! -name "kustomization.yaml" \
            ! -name "kustomization.yml" \
            ! -path "*/flux-system/*" \
            ! -path "*/kube-system/*" \
            > manifests.txt

          MANIFEST_COUNT=$(wc -l < manifests.txt)

          echo "üìä Found $MANIFEST_COUNT Kubernetes manifests to scan:"
          echo "manifest_count=$MANIFEST_COUNT" >> $GITHUB_OUTPUT

          if [ $MANIFEST_COUNT -eq 0 ]; then
            echo "‚ö†Ô∏è No manifests found to scan!"
            echo "scan_needed=false" >> $GITHUB_OUTPUT
          else
            echo "scan_needed=true" >> $GITHUB_OUTPUT
            echo "üìã Manifest list:"
            cat manifests.txt | head -10
            if [ $MANIFEST_COUNT -gt 10 ]; then
              echo "... and $(($MANIFEST_COUNT - 10)) more files"
            fi
          fi

      - name: üîí Run Kubesec Security Scanner
        id: scan
        if: steps.discover.outputs.scan_needed == 'true'
        run: |
          echo "üîí Installing and running Kubesec security scanner..."

          # Download kubesec binary
          echo "üì• Downloading kubesec v${{ env.KUBESEC_VERSION }}..."
          curl -sSLo kubesec "https://github.com/controlplaneio/kubesec/releases/download/v${{ env.KUBESEC_VERSION }}/kubesec_linux_amd64"
          chmod +x kubesec

          # Verify download
          ./kubesec version

          # Initialize SARIF structure
          echo "üìã Initializing SARIF results..."
          cat > kubesec-results.sarif << EOF
          {
            "version": "2.1.0",
            "\$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "kubesec",
                    "version": "${{ env.KUBESEC_VERSION }}",
                    "informationUri": "https://kubesec.io/",
                    "rules": [
                      {
                        "id": "kubesec-score",
                        "name": "Kubesec Security Score",
                        "shortDescription": {
                          "text": "Security score based on Kubernetes best practices"
                        },
                        "fullDescription": {
                          "text": "Kubesec analyzes Kubernetes manifests and provides a security score based on various security checks."
                        }
                      }
                    ]
                  }
                },
                "results": []
              }
            ]
          }
          EOF

          # Scan each manifest and collect results
          echo "üîç Scanning manifests..."
          RESULTS_TEMP=$(mktemp)
          echo "[]" > "$RESULTS_TEMP"

          SCANNED_COUNT=0
          CRITICAL_COUNT=0
          WARNING_COUNT=0
          INFO_COUNT=0

          while IFS= read -r manifest; do
            echo "üîç Scanning: $manifest"

            # Run kubesec scan
            if RESULT=$(./kubesec scan "$manifest" --format json 2>/dev/null); then
              # Parse the result
              SCORE=$(echo "$RESULT" | jq -r '.[0].score // 0' 2>/dev/null || echo "0")
              CRITICAL_ITEMS=$(echo "$RESULT" | jq -r '.[0].scoring.critical // []' 2>/dev/null || echo "[]")
              PASSED_ITEMS=$(echo "$RESULT" | jq -r '.[0].scoring.passed // []' 2>/dev/null || echo "[]")

              # Determine severity level
              if [ "$SCORE" -lt 0 ]; then
                LEVEL="error"
                CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
              elif [ "$SCORE" -lt 10 ]; then
                LEVEL="warning"
                WARNING_COUNT=$((WARNING_COUNT + 1))
              else
                LEVEL="note"
                INFO_COUNT=$((INFO_COUNT + 1))
              fi

              # Add result to SARIF if score is concerning
              if [ "$SCORE" -lt 10 ]; then
                # Create a proper SARIF result entry
                jq --arg manifest "$manifest" --arg score "$SCORE" --arg level "$LEVEL" \
                   '. + [{
                     "ruleId": "kubesec-score",
                     "level": $level,
                     "message": {
                       "text": ("Kubesec security score: " + $score + "/10 for " + ($manifest | split("/") | last))
                     },
                     "locations": [{
                       "physicalLocation": {
                         "artifactLocation": {
                           "uri": $manifest
                         }
                       }
                     }]
                   }]' "$RESULTS_TEMP" > "${RESULTS_TEMP}.new" && mv "${RESULTS_TEMP}.new" "$RESULTS_TEMP"
              fi

              echo "ÔøΩ Score: $SCORE/10 ($LEVEL)"
              SCANNED_COUNT=$((SCANNED_COUNT + 1))
            else
              echo "‚ö†Ô∏è Failed to scan $manifest"
            fi
          done < manifests.txt

          # Update SARIF with collected results
          jq --argjson results "$(cat "$RESULTS_TEMP")" '.runs[0].results = $results' kubesec-results.sarif > kubesec-results-final.sarif
          mv kubesec-results-final.sarif kubesec-results.sarif

          # Cleanup
          rm -f "$RESULTS_TEMP"

          echo "‚úÖ Kubesec scan completed!"
          echo "üìä Summary: Scanned $SCANNED_COUNT manifests"
          echo "üî¥ Critical issues: $CRITICAL_COUNT"
          echo "üü° Warnings: $WARNING_COUNT"
          echo "üü¢ Info/Good: $INFO_COUNT"

          # Set outputs for summary
          echo "scanned_count=$SCANNED_COUNT" >> $GITHUB_OUTPUT
          echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT
          echo "info_count=$INFO_COUNT" >> $GITHUB_OUTPUT

      - name: üîç Additional Security Checks
        id: security
        if: steps.discover.outputs.scan_needed == 'true'
        run: |
          echo "üîí Running additional security checks on manifests..."

          # Initialize counters and results
          PRIVILEGED_COUNT=0
          HOST_NETWORK_COUNT=0
          ROOT_USER_COUNT=0
          SECURITY_ISSUES=""

          # Check for privileged containers
          echo "üîç Checking for privileged containers..."
          if PRIVILEGED_FILES=$(grep -r -l "privileged.*true" kubernetes/ 2>/dev/null); then
            PRIVILEGED_COUNT=$(echo "$PRIVILEGED_FILES" | wc -l)
            echo "‚ö†Ô∏è Found $PRIVILEGED_COUNT files with privileged containers:"
            echo "$PRIVILEGED_FILES" | while read -r file; do
              echo "  - $file"
            done
            SECURITY_ISSUES="${SECURITY_ISSUES}Privileged containers: $PRIVILEGED_COUNT files; "
          else
            echo "‚úÖ No privileged containers found"
          fi

          # Check for hostNetwork usage
          echo "üîç Checking for hostNetwork usage..."
          if HOST_NETWORK_FILES=$(grep -r -l "hostNetwork.*true" kubernetes/ 2>/dev/null); then
            HOST_NETWORK_COUNT=$(echo "$HOST_NETWORK_FILES" | wc -l)
            echo "‚ö†Ô∏è Found $HOST_NETWORK_COUNT files with hostNetwork usage:"
            echo "$HOST_NETWORK_FILES" | while read -r file; do
              echo "  - $file"
            done
            SECURITY_ISSUES="${SECURITY_ISSUES}HostNetwork usage: $HOST_NETWORK_COUNT files; "
          else
            echo "‚úÖ No hostNetwork usage found"
          fi

          # Check for root users
          echo "üîç Checking for root users..."
          if ROOT_USER_FILES=$(grep -r -l "runAsUser.*0" kubernetes/ 2>/dev/null); then
            ROOT_USER_COUNT=$(echo "$ROOT_USER_FILES" | wc -l)
            echo "‚ö†Ô∏è Found $ROOT_USER_COUNT files with containers running as root:"
            echo "$ROOT_USER_FILES" | while read -r file; do
              echo "  - $file"
            done
            SECURITY_ISSUES="${SECURITY_ISSUES}Root users: $ROOT_USER_COUNT files; "
          else
            echo "‚úÖ No root user containers found"
          fi

          # Set outputs
          echo "privileged_containers=$PRIVILEGED_COUNT" >> $GITHUB_OUTPUT
          echo "host_network=$HOST_NETWORK_COUNT" >> $GITHUB_OUTPUT
          echo "root_users=$ROOT_USER_COUNT" >> $GITHUB_OUTPUT

          # Generate security summary
          if [ -z "$SECURITY_ISSUES" ]; then
            SECURITY_SUMMARY="‚úÖ All additional security checks passed"
          else
            SECURITY_SUMMARY="‚ö†Ô∏è Security issues found: $SECURITY_ISSUES"
          fi
          echo "security_summary=$SECURITY_SUMMARY" >> $GITHUB_OUTPUT

          echo "‚úÖ Additional security checks completed!"
          echo "üìä Summary: $SECURITY_SUMMARY"

      - name: üìä Generate Scan Summary
        if: steps.discover.outputs.scan_needed == 'true'
        run: |
          echo "## üîí Kubesec Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìÅ **Scanned**: ${{ steps.discover.outputs.manifest_count }} Kubernetes manifests" >> $GITHUB_STEP_SUMMARY
          echo "üïí **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "üîß **Kubesec Version**: ${{ env.KUBESEC_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### üìä Kubesec Scan Statistics" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| üîç Scanned | ${{ steps.scan.outputs.scanned_count || '0' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üî¥ Critical | ${{ steps.scan.outputs.critical_count || '0' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üü° Warnings | ${{ steps.scan.outputs.warning_count || '0' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üü¢ Good/Info | ${{ steps.scan.outputs.info_count || '0' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### üîç Additional Security Checks" >> $GITHUB_STEP_SUMMARY
          echo "| Security Check | Count | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Privileged Containers | ${{ steps.security.outputs.privileged_containers || '0' }} | ${{ steps.security.outputs.privileged_containers == '0' && '‚úÖ Safe' || '‚ö†Ô∏è Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Host Network Usage | ${{ steps.security.outputs.host_network || '0' }} | ${{ steps.security.outputs.host_network == '0' && '‚úÖ Safe' || '‚ö†Ô∏è Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Root User Containers | ${{ steps.security.outputs.root_users || '0' }} | ${{ steps.security.outputs.root_users == '0' && '‚úÖ Safe' || '‚ö†Ô∏è Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Additional Security Summary:** ${{ steps.security.outputs.security_summary || 'No additional security scan data available' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f kubesec-results.sarif ]; then
            echo "‚úÖ **Status**: Scan completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "üìã **Results**: Available in Security tab" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üéØ **Runner**: home-ops-runner (native kubesec binary)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Status**: Scan failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üì§ Upload Security Results
        if: steps.discover.outputs.scan_needed == 'true' && always()
        # renovate: datasource=github-tags depName=github/codeql-action
        uses: github/codeql-action/upload-sarif@07bb2b932c90fc1ec97637495e4072a0966fa74c # v3.29.4
        with:
          sarif_file: kubesec-results.sarif
          category: kubesec

      - name: ‚ö†Ô∏è Skip Notification
        if: steps.discover.outputs.scan_needed == 'false'
        run: |
          echo "## üîí Kubesec Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ÑπÔ∏è **No Kubernetes manifests found to scan**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The scan was skipped because no relevant YAML files were detected." >> $GITHUB_STEP_SUMMARY
