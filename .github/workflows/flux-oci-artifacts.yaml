---
name: Flux OCI Artifacts

on:
  push:
    branches: [main]
    paths:
      - 'kubernetes/**'
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write  # Required for Cosign keyless signing

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/flux-manifests

jobs:
  build-and-push:
    runs-on: oci-workflows-runner
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flux CLI
        uses: fluxcd/flux2/action@main

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.6.0
        with:
          cosign-release: 'v2.2.4'

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=main-{{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push OCI artifact
        id: build
        run: |
          # Create temporary directory for flux manifests
          mkdir -p flux-manifests

          # Copy kubernetes directory to temporary location
          cp -r kubernetes/ flux-manifests/

          # Push to OCI registry using flux - iterate through all tags
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n'); do
            echo "Pushing artifact with tag: $tag"

            # Push and capture output with digest
            PUSH_OUTPUT=$(flux push artifact oci://$tag \
              --path="./flux-manifests" \
              --source="${{ github.repositoryUrl }}" \
              --revision="${{ github.sha }}" 2>&1)

            echo "Push output: $PUSH_OUTPUT"

            # Extract digest from push output
            DIGEST=$(echo "$PUSH_OUTPUT" | grep -o 'sha256:[a-f0-9]\{64\}' | head -1)

            if [ -n "$DIGEST" ]; then
              # Sign the artifact using digest for best practices
              echo "Signing artifact: $tag@$DIGEST"
              cosign sign --yes $tag@$DIGEST
            else
              # Fallback to signing with tag if digest extraction fails
              echo "Warning: Could not extract digest, signing with tag: $tag"
              cosign sign --yes $tag
            fi
          done

          # Get digest for latest tag
          echo "digest=$(flux tag artifact oci://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --output json | jq -r .digest)" >> $GITHUB_OUTPUT

  update-flux-system:
    needs: build-and-push
    runs-on: oci-workflows-runner
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update flux-system to use OCI artifact
        run: |
          echo "Built OCI artifact: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"

          # Send webhook to main receiver - Flux will automatically detect what changed
          echo "Sending webhook to Flux for immediate sync..."

          curl -X POST \
            -H "Content-Type: application/json" \
            -H "X-GitHub-Event: push" \
            -H "Authorization: token ${{ secrets.FLUX_WEBHOOK_TOKEN }}" \
            -d '{
              "ref": "refs/heads/main",
              "repository": {
                "name": "${{ github.event.repository.name }}",
                "full_name": "${{ github.repository }}"
              },
              "head_commit": {
                "id": "${{ github.sha }}",
                "message": "Update OCI artifacts",
                "timestamp": "${{ github.event.head_commit.timestamp }}"
              }
            }' \
            https://flux-webhook.vzkn.eu/hook/github-webhook

          echo "Webhook sent! Flux will automatically reconcile only changed applications."
