---
name: Flux OCI Artifacts

on:
  push:
    branches: [main]
    paths:
      - 'kubernetes/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/flux-manifests

jobs:
  prepare:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=main-{{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Generate cache key
        id: cache-key
        run: |
          # Create hash of kubernetes directory content
          HASH=$(find kubernetes/ -type f -name "*.yaml" -o -name "*.yml" | sort | xargs sha256sum | sha256sum | cut -d' ' -f1)
          echo "key=flux-manifests-$HASH" >> $GITHUB_OUTPUT

  build-artifacts:
    needs: prepare
    runs-on: oci-workflows-runner
    permissions:
      contents: read
      packages: write
      actions: read
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Setup Flux CLI
        uses: fluxcd/flux2/action@main
        with:
          version: 'latest'

      - name: Cache flux manifests
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
        with:
          path: flux-manifests/
          key: ${{ needs.prepare.outputs.cache-key }}
          restore-keys: |
            flux-manifests-

      - name: Log in to Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push OCI artifacts
        id: build
        run: |
          # Create temporary directory for flux manifests
          mkdir -p flux-manifests

          # Copy kubernetes directory to temporary location
          cp -r kubernetes/ flux-manifests/

          # Push to OCI registry using flux - iterate through all tags
          for tag in $(echo "${{ needs.prepare.outputs.tags }}" | tr ',' '\n'); do
            echo "Pushing artifact with tag: $tag"

            # Push and capture output with digest
            PUSH_OUTPUT=$(flux push artifact oci://$tag \
              --path="./flux-manifests" \
              --source="${{ github.repositoryUrl }}" \
              --revision="${{ github.sha }}" 2>&1)

            echo "Push output: $PUSH_OUTPUT"
          done

          # Get digest for latest tag
          echo "digest=$(flux tag artifact oci://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --output json | jq -r .digest)" >> $GITHUB_OUTPUT

  sign-artifacts:
    needs: [prepare, build-artifacts]
    runs-on: oci-workflows-runner
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@4959ce089c160fddf62f7b42464195ba1a56d382 # v3.6.0
        with:
          cosign-release: 'v2.2.4'

      - name: Log in to Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign OCI artifacts
        run: |
          # Sign all pushed tags
          for tag in $(echo "${{ needs.prepare.outputs.tags }}" | tr ',' '\n'); do
            echo "Signing artifact: $tag"

            # Get digest for this specific tag
            DIGEST=$(flux tag artifact oci://$tag --output json | jq -r .digest 2>/dev/null || echo "")

            if [ -n "$DIGEST" ] && [ "$DIGEST" != "null" ]; then
              echo "Signing with digest: $tag@$DIGEST"
              cosign sign --yes $tag@$DIGEST
            else
              echo "Signing with tag (fallback): $tag"
              cosign sign --yes $tag
            fi
          done

  notify-flux:
    needs: [prepare, build-artifacts, sign-artifacts]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
    steps:
      - name: Notify Flux webhook
        run: |
          echo "Built and signed OCI artifacts:"
          echo "Tags: ${{ needs.prepare.outputs.tags }}"
          echo "Digest: ${{ needs.build-artifacts.outputs.image-digest }}"

          # Notify Flux about OCI artifacts update - only AFTER they're built and signed
          echo "Notifying Flux about new OCI artifacts..."
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "X-GitHub-Event: push" \
            -H "X-Hub-Signature-256: sha256=${{ secrets.FLUX_GITHUB_WEBHOOK_TOKEN }}" \
            -d '{
              "ref": "refs/heads/main",
              "repository": {
                "name": "${{ github.event.repository.name }}",
                "full_name": "${{ github.repository }}",
                "html_url": "${{ github.event.repository.html_url }}"
              },
              "head_commit": {
                "id": "${{ github.sha }}",
                "message": "OCI artifacts updated - ${{ github.event.head_commit.message }}",
                "timestamp": "${{ github.event.head_commit.timestamp }}",
                "url": "${{ github.event.head_commit.url }}"
              },
              "pusher": {
                "name": "${{ github.actor }}"
              }
            }' \
            https://flux-webhook.vzkn.eu/hook/616280f327ace9696357daafd63c9c328b9673a5c35680ca0ff804512fe3a7a3 || echo "Webhook failed, but OCI artifacts are ready"

          echo "âœ… OCI artifacts built, signed and Flux notified!"
