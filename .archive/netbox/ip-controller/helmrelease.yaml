---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app netbox-ip-controller
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      netbox-ip-controller:
        replicas: 1
        strategy: Recreate
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: docker.io/digitalocean/netbox-ip-controller
              tag: v0.4.2
            env:
              TZ: Europe/Warsaw
              NETBOX_API_URL: "http://netbox.network.svc.cluster.local/api"
              NETBOX_TOKEN:
                valueFrom:
                  secretKeyRef:
                    name: netbox-ip-controller-secret
                    key: NETBOX_TOKEN
              CLUSTER_DOMAIN: "cluster.local"
              POD_IP_TAGS: "kubernetes,k8s-pod,home-ops"
              SERVICE_IP_TAGS: "kubernetes,k8s-service,home-ops"
              POD_PUBLISH_LABELS: "app,k8s-app,app.kubernetes.io/name"
              SERVICE_PUBLISH_LABELS: "app,k8s-app,app.kubernetes.io/name"
              DUAL_STACK_IP: "false"
              DEBUG: "true"
              METRICS_ADDR: ":8001"
              READY_CHECK_ADDR: ":5001"
              NETBOX_QPS: "100"
              NETBOX_BURST: "1"
              KUBE_QPS: "20"
              KUBE_BURST: "30"
            probes:
              liveness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /healthz
                    port: &readyPort 5001
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  timeoutSeconds: 5
                  failureThreshold: 3
              readiness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /readyz
                    port: *readyPort
                  initialDelaySeconds: 5
                  periodSeconds: 5
                  timeoutSeconds: 3
                  failureThreshold: 3
            resources:
              requests:
                cpu: 10m
                memory: 64Mi
              limits:
                memory: 256Mi
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 100
        fsGroup: 100
        fsGroupChangePolicy: OnRootMismatch
    service:
      app:
        ports:
          http:
            port: &metricsPort 8001
          ready:
            port: *readyPort
    serviceAccount:
      netbox-ip-controller: {}
    rbac:
      bindings:
        netbox-ip-controller:
          type: ClusterRoleBinding
          roleRef:
            identifier: *app
          subjects:
            - identifier: *app
      roles:
        netbox-ip-controller:
          type: ClusterRole
          rules:
            - apiGroups:
                - netbox.digitalocean.com
              resources:
                - netboxips
              verbs:
                - "*"
            - apiGroups:
                - apiextensions.k8s.io
              resources:
                - customresourcedefinitions
              verbs:
                - "*"
            - apiGroups:
                - ""
              resources:
                - services
                - pods
              verbs:
                - get
                - list
                - watch
    serviceMonitor:
      app:
        serviceName: *app
        endpoints:
          - port: http
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 10s
