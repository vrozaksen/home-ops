---
name: Flux OCI Artifacts

on:
  push:
    branches: [main]
    paths:
      - 'kubernetes/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/flux-manifests

jobs:
  prepare:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=main-{{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Generate cache key
        id: cache-key
        run: |
          # Create hash of kubernetes directory content
          HASH=$(find kubernetes/ -type f -name "*.yaml" -o -name "*.yml" | sort | xargs sha256sum | sha256sum | cut -d' ' -f1)
          echo "key=flux-manifests-$HASH" >> $GITHUB_OUTPUT

  build-artifacts:
    needs: prepare
    runs-on: oci-workflows-runner
    permissions:
      contents: read
      packages: write
      actions: read
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      all-digests: ${{ steps.build.outputs.all-digests }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flux CLI
        uses: fluxcd/flux2/action@main
        with:
          version: 'latest'

      - name: Cache flux manifests
        uses: actions/cache@v4
        with:
          path: flux-manifests/
          key: ${{ needs.prepare.outputs.cache-key }}
          restore-keys: |
            flux-manifests-

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push OCI artifacts
        id: build
        run: |
          # Create temporary directory for flux manifests
          mkdir -p flux-manifests

          # Copy kubernetes directory to temporary location
          cp -r kubernetes/ flux-manifests/

          # Push to OCI registry using flux - iterate through all tags
          LATEST_DIGEST=""
          ALL_DIGESTS=""
          for tag in $(echo "${{ needs.prepare.outputs.tags }}" | tr ',' '\n'); do
            echo "Pushing artifact with tag: $tag"

            # Push and capture output with digest
            PUSH_OUTPUT=$(flux push artifact oci://$tag \
              --path="./flux-manifests" \
              --source="${{ github.repositoryUrl }}" \
              --revision="${{ github.sha }}" 2>&1)

            echo "Push output: $PUSH_OUTPUT"

            # Extract digest from push output
            DIGEST=$(echo "$PUSH_OUTPUT" | grep -o 'sha256:[a-f0-9]\{64\}' | head -1)

            if [ -n "$DIGEST" ]; then
              # Store digest with tag for later use
              ALL_DIGESTS="${ALL_DIGESTS}${tag}@${DIGEST},"

              # Keep latest digest for legacy compatibility
              if [[ "$tag" == *":latest" ]]; then
                LATEST_DIGEST="$DIGEST"
              fi
            fi
          done

          # Set outputs
          echo "digest=$LATEST_DIGEST" >> $GITHUB_OUTPUT
          echo "all-digests=${ALL_DIGESTS%,}" >> $GITHUB_OUTPUT  # Remove trailing comma
          echo "Latest digest: $LATEST_DIGEST"
          echo "All digests: ${ALL_DIGESTS%,}"

  sign-artifacts:
    needs: [prepare, build-artifacts]
    runs-on: oci-workflows-runner
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2
        with:
          cosign-release: 'v2.2.4'

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate build provenance attestation
        uses: actions/attest-build-provenance@v1
        if: needs.build-artifacts.outputs.image-digest != ''
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ needs.build-artifacts.outputs.image-digest }}
          push-to-registry: true

      - name: Sign OCI artifacts
        run: |
          # Parse all digests from build output
          ALL_DIGESTS="${{ needs.build-artifacts.outputs.all-digests }}"
          echo "All digests from build: $ALL_DIGESTS"

          # Sign all pushed tags using their exact digests
          for tag in $(echo "${{ needs.prepare.outputs.tags }}" | tr ',' '\n'); do
            echo "Signing artifact: $tag"

            # Find digest for this specific tag
            DIGEST=""
            if [ -n "$ALL_DIGESTS" ]; then
              for tag_digest in $(echo "$ALL_DIGESTS" | tr ',' '\n'); do
                if [[ "$tag_digest" == "$tag@"* ]]; then
                  DIGEST=$(echo "$tag_digest" | cut -d'@' -f2)
                  break
                fi
              done
            fi

            if [ -n "$DIGEST" ] && [ "$DIGEST" != "null" ]; then
              echo "Signing with digest: $tag@$DIGEST"
              cosign sign --yes $tag@$DIGEST
            else
              echo "Warning: Could not find digest for $tag, signing with tag (not recommended)"
              cosign sign --yes $tag
            fi
          done

      - name: Clean up cache
        run: |
          echo "Cleaning up flux-manifests cache after successful signing..."
          rm -rf flux-manifests/ || true
          echo "âœ… OCI artifacts built, signed and cache cleaned!"
