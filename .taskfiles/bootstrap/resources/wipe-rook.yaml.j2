---
apiVersion: batch/v1
kind: Job
metadata:
  name: &app wipe-lvm
  namespace: default
  labels:
    app.kubernetes.io/name: *app
spec:
  parallelism: {{ ENV.NODES }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: *app
    spec:
      restartPolicy: Never
      initContainers:
        - name: data
          image: docker.io/library/alpine:latest
          command: ["/bin/sh", "-c"]
          args: ["rm -rf /mnt/host_var/lib/rook"]
          volumeMounts:
            - mountPath: /mnt/host_var
              name: host-var
          securityContext:
            privileged: true
          resources: {}
      containers:
        - name: disk
          image: docker.io/library/alpine:latest
          command: ["/bin/sh", "-c"]
          args:
            - |
              apk add --no-cache device-mapper util-linux lvm2;
              DISK="/dev/nvme0n1"
              VG_NAME="linstor_data"
              THIN_POOL_NAME="thin"

              echo "=== Wiping $DISK ===";
              sgdisk --zap-all $DISK;
              dd if=/dev/zero of="$DISK" bs=1M count=100 oflag=direct;
              blkdiscard $DISK || echo "blkdiscard not supported or disk is busy";
              wipefs -a $DISK || echo "Wipefs failed";
              partprobe $DISK || echo "Kernel not updated, you might need a reboot";

              echo "=== Setting up LVM on $DISK ===";
              pvcreate $DISK;
              vgcreate $VG_NAME $DISK;
              lvcreate --type thin-pool -L 100%FREE -n $THIN_POOL_NAME $VG_NAME;

              echo "=== LVM Configuration Complete ===";
              pvs;
              vgs;
              lvs;

          securityContext:
            privileged: true
          volumeMounts:
            - name: host-dev
              mountPath: /dev
          resources: {}
      volumes:
        - name: host-var
          hostPath:
            path: /var
        - name: host-dev
          hostPath:
            path: /dev
            type: Directory
      topologySpreadConstraints:
        - maxSkew: 1
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: *app
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
