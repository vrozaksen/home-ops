---
name: Flux OCI Artifacts

on:
  push:
    branches: [main]
    paths:
      - 'kubernetes/**'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if cache exists'
        required: false
        default: false
        type: boolean
      skip_signing:
        description: 'Skip artifact signing (faster for testing)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/flux-manifests

jobs:
  prepare:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout
        # renovate: datasource=github-tags depName=actions/checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Extract metadata
        id: meta
        # renovate: datasource=github-tags depName=docker/metadata-action
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5.6.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=main-{{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Generate cache key
        id: cache-key
        run: |
          # Create hash of kubernetes directory content
          HASH=$(find kubernetes/ -type f -name "*.yaml" -o -name "*.yml" | sort | xargs sha256sum | sha256sum | cut -d' ' -f1)

          # Add force rebuild flag to cache key if enabled
          if [[ "${{ inputs.force_rebuild }}" == "true" ]]; then
            HASH="${HASH}-force-$(date +%s)"
          fi

          echo "key=flux-manifests-$HASH" >> $GITHUB_OUTPUT
          echo "üîë Cache key: flux-manifests-$HASH"

  build-artifacts:
    needs: prepare
    runs-on: oci-workflows-runner
    permissions:
      contents: read
      packages: write
      actions: read
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      all-digests: ${{ steps.build.outputs.all-digests }}
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
      artifact-size: ${{ steps.build.outputs.artifact-size }}
    steps:
      - name: Checkout
        # renovate: datasource=github-tags depName=actions/checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Flux CLI
        # renovate: datasource=github-tags depName=fluxcd/flux2
        uses: fluxcd/flux2/action@4e53b6cb8dd1961b523fa2d7df82fd3cd9eab78c # main
        with:
          # renovate: datasource=github-releases depName=fluxcd/flux2
          version: 'v2.6.4'

      - name: Cache flux manifests
        id: cache
        # renovate: datasource=github-tags depName=actions/cache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: flux-manifests/
          key: ${{ needs.prepare.outputs.cache-key }}
          restore-keys: |
            flux-manifests-

      - name: Check cache status
        run: |
          if [[ "${{ steps.cache.outputs.cache-hit }}" == "true" ]]; then
            echo "‚úÖ Cache hit! Using cached manifests"
          else
            echo "üîÑ Cache miss - will build fresh artifacts"
          fi

      - name: Log in to Container Registry
        # renovate: datasource=github-tags depName=docker/login-action
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push OCI artifacts
        id: build
        run: |
          # Create temporary directory for flux manifests
          mkdir -p flux-manifests

          # Copy kubernetes directory to temporary location
          cp -r kubernetes/ flux-manifests/

          # Calculate and display manifest size
          MANIFEST_SIZE=$(du -sh flux-manifests/ | cut -f1)
          MANIFEST_COUNT=$(find flux-manifests/ -name "*.yaml" -o -name "*.yml" | wc -l)
          echo "üì¶ Manifest size: $MANIFEST_SIZE ($MANIFEST_COUNT files)"
          echo "artifact-size=$MANIFEST_SIZE" >> $GITHUB_OUTPUT

          # Push to OCI registry using flux - iterate through all tags
          LATEST_DIGEST=""
          ALL_DIGESTS=""
          FAILED_TAGS=""

          for tag in $(echo "${{ needs.prepare.outputs.tags }}" | tr ',' '\n'); do
            echo "üöÄ Pushing artifact with tag: $tag"

            # Push and capture output with digest
            if PUSH_OUTPUT=$(flux push artifact oci://$tag \
              --path="./flux-manifests" \
              --source="${{ github.repositoryUrl }}" \
              --revision="${{ github.sha }}" 2>&1); then

              echo "‚úÖ Push successful: $PUSH_OUTPUT"

              # Extract digest from push output
              DIGEST=$(echo "$PUSH_OUTPUT" | grep -o 'sha256:[a-f0-9]\{64\}' | head -1)

              if [ -n "$DIGEST" ]; then
                # Store digest with tag for later use
                ALL_DIGESTS="${ALL_DIGESTS}${tag}@${DIGEST},"

                # Keep latest digest for legacy compatibility
                if [[ "$tag" == *":latest" ]]; then
                  LATEST_DIGEST="$DIGEST"
                fi
                echo "üìù Stored digest for $tag: $DIGEST"
              else
                echo "‚ö†Ô∏è Warning: No digest found in push output for $tag"
                FAILED_TAGS="${FAILED_TAGS}$tag,"
              fi
            else
              echo "‚ùå Push failed for $tag: $PUSH_OUTPUT"
              FAILED_TAGS="${FAILED_TAGS}$tag,"
            fi
          done

          # Report any failures
          if [ -n "$FAILED_TAGS" ]; then
            echo "‚ö†Ô∏è Failed to push tags: ${FAILED_TAGS%,}"
          fi

          # Set outputs
          echo "digest=$LATEST_DIGEST" >> $GITHUB_OUTPUT
          echo "all-digests=${ALL_DIGESTS%,}" >> $GITHUB_OUTPUT  # Remove trailing comma
          echo "üéØ Latest digest: $LATEST_DIGEST"
          echo "üìã All digests: ${ALL_DIGESTS%,}"

  sign-artifacts:
    needs: [prepare, build-artifacts]
    runs-on: oci-workflows-runner
    if: ${{ !cancelled() && needs.build-artifacts.result == 'success' && (github.event_name == 'push' || !inputs.skip_signing) }}
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    env:
      COSIGN_YES: true
    steps:
      - name: Install Cosign
        # renovate: datasource=github-tags depName=sigstore/cosign-installer
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2
        with:
          # renovate: datasource=github-releases depName=sigstore/cosign
          cosign-release: 'v2.2.4'

      - name: Log in to Container Registry
        # renovate: datasource=github-tags depName=docker/login-action
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate build provenance attestation
        # renovate: datasource=github-tags depName=actions/attest-build-provenance
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
        if: needs.build-artifacts.outputs.image-digest != ''
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ needs.build-artifacts.outputs.image-digest }}
          push-to-registry: true

      - name: Sign OCI artifacts
        run: |
          echo "üîê Starting artifact signing process..."
          echo "üîß Environment: COSIGN_YES=$COSIGN_YES"

          # Parse all digests from build output
          ALL_DIGESTS="${{ needs.build-artifacts.outputs.all-digests }}"
          echo "üìã All digests from build: $ALL_DIGESTS"

          if [ -z "$ALL_DIGESTS" ]; then
            echo "‚ùå No digests found - skipping signing"
            exit 1
          fi

          SIGNED_COUNT=0
          FAILED_COUNT=0

          # Sign all pushed tags using their exact digests
          for tag in $(echo "${{ needs.prepare.outputs.tags }}" | tr ',' '\n'); do
            echo "üñäÔ∏è Processing signature for: $tag"

            # Find digest for this specific tag
            DIGEST=""
            if [ -n "$ALL_DIGESTS" ]; then
              for tag_digest in $(echo "$ALL_DIGESTS" | tr ',' '\n'); do
                if [[ "$tag_digest" == "$tag@"* ]]; then
                  DIGEST=$(echo "$tag_digest" | cut -d'@' -f2)
                  break
                fi
              done
            fi

            if [ -n "$DIGEST" ] && [ "$DIGEST" != "null" ]; then
              ARTIFACT_REF="$tag@$DIGEST"
              echo "‚úçÔ∏è Signing with digest: $ARTIFACT_REF"

              if cosign sign --yes "$ARTIFACT_REF" 2>&1; then
                echo "‚úÖ Successfully signed: $ARTIFACT_REF"
                ((SIGNED_COUNT++))
              else
                COSIGN_EXIT_CODE=$?
                echo "‚ùå Failed to sign: $ARTIFACT_REF (exit code: $COSIGN_EXIT_CODE)"
                ((FAILED_COUNT++))
                # Continue with other tags instead of failing immediately
              fi
            else
              echo "‚ö†Ô∏è Warning: Could not find digest for $tag, signing with tag (not recommended)"
              if cosign sign --yes "$tag" 2>&1; then
                echo "‚úÖ Successfully signed (tag): $tag"
                ((SIGNED_COUNT++))
              else
                COSIGN_EXIT_CODE=$?
                echo "‚ùå Failed to sign (tag): $tag (exit code: $COSIGN_EXIT_CODE)"
                ((FAILED_COUNT++))
                # Continue with other tags
              fi
            fi
          done

          echo "üìä Signing summary: $SIGNED_COUNT successful, $FAILED_COUNT failed"

          # Only fail if ALL signatures failed
          if [ $SIGNED_COUNT -eq 0 ] && [ $FAILED_COUNT -gt 0 ]; then
            echo "‚ùå All signatures failed!"
            exit 1
          elif [ $FAILED_COUNT -gt 0 ]; then
            echo "‚ö†Ô∏è Some signatures failed, but $SIGNED_COUNT succeeded"
          else
            echo "üéâ All signatures completed successfully!"
          fi

      - name: Clean up cache
        run: |
          echo "üßπ Cleaning up flux-manifests cache after successful signing..."
          rm -rf flux-manifests/ || true
          echo "‚úÖ OCI artifacts built, signed and cache cleaned!"

          # Summary report
          echo "üìä Workflow Summary:"
          echo "‚Ä¢ Artifacts size: ${{ needs.build-artifacts.outputs.artifact-size }}"
          echo "‚Ä¢ Cache hit: ${{ needs.build-artifacts.outputs.cache-hit }}"
          echo "‚Ä¢ Signing: ${{ inputs.skip_signing && 'Skipped' || 'Completed' }}"
          echo "‚Ä¢ Force rebuild: ${{ inputs.force_rebuild }}"

  summary:
    if: always()
    needs: [prepare, build-artifacts, sign-artifacts]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Generate workflow summary
        run: |
          echo "# üì¶ Flux OCI Artifacts Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## üèóÔ∏è Build Results" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Manifest Size | ${{ needs.build-artifacts.outputs.artifact-size || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Cache Hit | ${{ needs.build-artifacts.outputs.cache-hit == 'true' && '‚úÖ Yes' || '‚ùå No' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Signing | ${{ inputs.skip_signing && '‚è≠Ô∏è Skipped' || (needs.sign-artifacts.result == 'success' && '‚úÖ Completed' || '‚ùå Failed') }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Force Rebuild | ${{ inputs.force_rebuild && '‚úÖ Yes' || '‚ùå No' }} |" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üè∑Ô∏è Generated Tags" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.prepare.outputs.tags }}" | tr ',' '\n' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.build-artifacts.outputs.all-digests }}" != "" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## üîç Artifact Digests" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "${{ needs.build-artifacts.outputs.all-digests }}" | tr ',' '\n' >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
