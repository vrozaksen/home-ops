---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

tasks:

  quick-strap:
    desc: Do a bunch of commands in a row because I'm really tired of this shit
    cmds:
      - task: apply-config
      - task: talos
      - task: apps
    requires:
      vars: [CLUSTER]
    preconditions:
      - bws -V
      - talosctl config info
      - test -f {{.BOOTSTRAP_DIR}}/talos/clusterconfig/talosconfig
      - test -f {{.BOOTSTRAP_DIR}}/apps/helmfile.yaml
      - test -f {{.BOOTSTRAP_DIR}}/apps/templates/resources.yaml.j2
      - test -f {{.BOOTSTRAP_DIR}}/apps/templates/wipe-rook.yaml.gotmpl
      - which curl jq helmfile kubectl bws talosctl

  gen-secrets:
    desc: Generate the Talos secrets
    cmds:
      - talhelper -f {{.BOOTSTRAP_DIR}}/talos/talconfig.yaml gensecret > {{.BOOTSTRAP_DIR}}/talos/talsecret.sops.yaml
      - task: :sops:.encrypt-file
        vars:
          FILE: "{{.BOOTSTRAP_DIR}}/talos/talsecret.sops.yaml"
    requires:
      vars: [CLUSTER]
    preconditions:
      - test -f {{.BOOTSTRAP_DIR}}/talos/talconfig.yaml
    status:
      - test -f "{{.BOOTSTRAP_DIR}}/talos/talsecret.sops.yaml"

  gen-config:
    desc: Generate the Talos configs
    cmd: talhelper -c {{.BOOTSTRAP_DIR}}/talos/talconfig.yaml genconfig -s {{.BOOTSTRAP_DIR}}/talos/talsecret.sops.yaml -o {{.BOOTSTRAP_DIR}}/talos/clusterconfig
    requires:
      vars: [CLUSTER]
    preconditions:
      - test -f {{.BOOTSTRAP_DIR}}/talos/talconfig.yaml
      - test -f {{.BOOTSTRAP_DIR}}/talos/talsecret.sops.yaml

  apply-config:
    desc: Apply the Talos config on a nodes for a new cluster
    dir: "{{.BOOTSTRAP_DIR}}/talos/"
    cmd: talhelper gencommand apply --extra-flags=--insecure | bash
    requires:
      vars: [CLUSTER]
    preconditions:
      - test -f {{.BOOTSTRAP_DIR}}/talos/talconfig.yaml
      - test -f {{.BOOTSTRAP_DIR}}/talos/talsecret.sops.yaml

  talos:
    desc: Bootstrap Talos [CLUSTER=main]
    cmds:
      - until talosctl --nodes {{.TALOS_CONTROLLER}} bootstrap --talosconfig {{.BOOTSTRAP_DIR}}/talos/clusterconfig/talosconfig; do sleep 5; done
      - talosctl kubeconfig --nodes {{.TALOS_CONTROLLER}} --force --force-context-name {{.CLUSTER}} {{.CLUSTER_DIR}} --talosconfig {{.BOOTSTRAP_DIR}}/talos/clusterconfig/talosconfig
    vars:
      TALOS_CONTROLLER:
        sh: talosctl config info --output json --context {{.CLUSTER}} --talosconfig {{.BOOTSTRAP_DIR}}/talos/clusterconfig/talosconfig | jq --raw-output '.endpoints[]' | shuf -n 1
    requires:
      vars: [CLUSTER]
    preconditions:
      - talosctl config info
      - test -f {{.BOOTSTRAP_DIR}}/talos/clusterconfig/talosconfig
      - which talosctl jq

  apps:
    desc: Bootstrap Apps [CLUSTER=main]
    prompt: Bootstrap apps into the Talos cluster?
    cmds:
      - until kubectl wait nodes --for=condition=Ready=False --all --timeout=10m; do sleep 5; done
      - export $(bws secret list --output env d78877ca-d005-4973-b288-b24e00bdef1d | grep -Ff {{.BOOTSTRAP_DIR}}/apps/.secrets.env) && minijinja-cli --env {{.BOOTSTRAP_DIR}}/apps/templates/resources.yaml.j2 | kubectl apply --server-side --filename -
      - sh -c 'for var in $(bws secret list --output env d78877ca-d005-4973-b288-b24e00bdef1d | cut -d= -f1); do unset $var; done'
      - helmfile --quiet --file {{.BOOTSTRAP_DIR}}/apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - helmfile --quiet --file {{.BOOTSTRAP_DIR}}/apps/helmfile.yaml destroy --selector name=wipe-rook || true
      - '{{if eq .NODE_COUNT 1}}talosctl reboot -n {{.TALOS_CONTROLLER}}{{end}}'
    vars:
      TALOS_CONTROLLER:
        sh: talosctl config info --output json --context {{.CLUSTER}} --talosconfig {{.BOOTSTRAP_DIR}}/talos/clusterconfig/talosconfig | jq --raw-output '.endpoints[]'
    env:
      NODE_COUNT:
        sh: talosctl --context {{.CLUSTER}} config info --output json | jq --raw-output '.nodes | length'
      VAULT: kubernetes # ¯\_(ツ)_/¯
    requires:
      vars: [CLUSTER]
    preconditions:
      - bws -V
      - talosctl config info
      - test -f {{.BOOTSTRAP_DIR}}/talos/clusterconfig/talosconfig
      - test -f {{.BOOTSTRAP_DIR}}/apps/helmfile.yaml
      - test -f {{.BOOTSTRAP_DIR}}/apps/templates/resources.yaml.j2
      - test -f {{.BOOTSTRAP_DIR}}/apps/templates/wipe-rook.yaml.gotmpl
      - which curl jq helmfile kubectl bws talosctl
