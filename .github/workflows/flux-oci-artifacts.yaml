---
name: Flux OCI Artifacts

on:
  push:
    branches: [main]
    paths:
      - 'kubernetes/**'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if cache exists'
        required: false
        default: false
        type: boolean
      skip_signing:
        description: 'Skip artifact signing (faster for testing)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/flux-manifests

# Allow parallel execution of multiple workflow runs
concurrency:
  group: flux-oci-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel in-progress runs

jobs:
  prepare:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout
        # renovate: datasource=github-tags depName=actions/checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Extract metadata
        id: meta
        # renovate: datasource=github-tags depName=docker/metadata-action
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=main,enable={{is_default_branch}}

      - name: Generate cache key
        id: cache-key
        run: |
          # Create hash of kubernetes directory content
          HASH=$(find kubernetes/ -type f -name "*.yaml" -o -name "*.yml" | sort | xargs sha256sum | sha256sum | cut -d' ' -f1)

          # Add force rebuild flag to cache key if enabled
          if [[ "${{ inputs.force_rebuild }}" == "true" ]]; then
            HASH="${HASH}-force-$(date +%s)"
          fi

          echo "key=flux-manifests-$HASH" >> $GITHUB_OUTPUT
          echo "🔑 Cache key: flux-manifests-$HASH"

  validate-manifests:
    needs: prepare
    runs-on: oci-workflows-runner
    permissions:
      contents: read
    steps:
      - name: Checkout
        # renovate: datasource=github-tags depName=actions/checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Flux CLI
        # renovate: datasource=github-tags depName=fluxcd/flux2
        uses: v2.6.4 # main
        with:
          # renovate: datasource=github-releases depName=fluxcd/flux2
          version: 'v2.6.4'

      - name: Validate Kubernetes manifests
        run: |
          echo "🔍 Validating Kubernetes manifests..."

          # Count manifests
          MANIFEST_COUNT=$(find kubernetes/ -name "*.yaml" -o -name "*.yml" | wc -l)
          echo "📄 Found $MANIFEST_COUNT manifest files"

          # Validate with flux
          flux check --pre

          # Basic YAML syntax validation
          find kubernetes/ -name "*.yaml" -o -name "*.yml" | while read -r file; do
            if ! yq eval 'true' "$file" >/dev/null 2>&1; then
              echo "❌ Invalid YAML: $file"
              exit 1
            fi
          done

          echo "✅ All manifests validated successfully!"

  security-scan:
    needs: prepare
    runs-on: oci-workflows-runner
    permissions:
      contents: read
      security-events: write
    outputs:
      privileged-containers: ${{ steps.security.outputs.privileged-containers }}
      host-network: ${{ steps.security.outputs.host-network }}
      root-users: ${{ steps.security.outputs.root-users }}
      security-summary: ${{ steps.security.outputs.security-summary }}
    steps:
      - name: Checkout
        # renovate: datasource=github-tags depName=actions/checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Run security checks
        id: security
        run: |
          echo "🔒 Running security checks on manifests..."

          # Initialize counters and results
          PRIVILEGED_COUNT=0
          HOST_NETWORK_COUNT=0
          ROOT_USER_COUNT=0
          SECURITY_ISSUES=""

          # Check for privileged containers
          echo "🔍 Checking for privileged containers..."
          if PRIVILEGED_FILES=$(grep -r -l "privileged.*true" kubernetes/ 2>/dev/null); then
            PRIVILEGED_COUNT=$(echo "$PRIVILEGED_FILES" | wc -l)
            echo "⚠️ Found $PRIVILEGED_COUNT files with privileged containers:"
            echo "$PRIVILEGED_FILES" | while read -r file; do
              echo "  - $file"
            done
            SECURITY_ISSUES="${SECURITY_ISSUES}Privileged containers: $PRIVILEGED_COUNT files; "
          else
            echo "✅ No privileged containers found"
          fi

          # Check for hostNetwork usage
          echo "🔍 Checking for hostNetwork usage..."
          if HOST_NETWORK_FILES=$(grep -r -l "hostNetwork.*true" kubernetes/ 2>/dev/null); then
            HOST_NETWORK_COUNT=$(echo "$HOST_NETWORK_FILES" | wc -l)
            echo "⚠️ Found $HOST_NETWORK_COUNT files with hostNetwork usage:"
            echo "$HOST_NETWORK_FILES" | while read -r file; do
              echo "  - $file"
            done
            SECURITY_ISSUES="${SECURITY_ISSUES}HostNetwork usage: $HOST_NETWORK_COUNT files; "
          else
            echo "✅ No hostNetwork usage found"
          fi

          # Check for root users
          echo "🔍 Checking for root users..."
          if ROOT_USER_FILES=$(grep -r -l "runAsUser.*0" kubernetes/ 2>/dev/null); then
            ROOT_USER_COUNT=$(echo "$ROOT_USER_FILES" | wc -l)
            echo "⚠️ Found $ROOT_USER_COUNT files with containers running as root:"
            echo "$ROOT_USER_FILES" | while read -r file; do
              echo "  - $file"
            done
            SECURITY_ISSUES="${SECURITY_ISSUES}Root users: $ROOT_USER_COUNT files; "
          else
            echo "✅ No root user containers found"
          fi

          # Set outputs
          echo "privileged-containers=$PRIVILEGED_COUNT" >> $GITHUB_OUTPUT
          echo "host-network=$HOST_NETWORK_COUNT" >> $GITHUB_OUTPUT
          echo "root-users=$ROOT_USER_COUNT" >> $GITHUB_OUTPUT

          # Generate security summary
          if [ -z "$SECURITY_ISSUES" ]; then
            SECURITY_SUMMARY="✅ All security checks passed"
          else
            SECURITY_SUMMARY="⚠️ Security issues found: $SECURITY_ISSUES"
          fi
          echo "security-summary=$SECURITY_SUMMARY" >> $GITHUB_OUTPUT

          echo "✅ Security scan completed!"
          echo "📊 Summary: $SECURITY_SUMMARY"

  build-artifacts:
    needs: prepare
    runs-on: oci-workflows-runner
    strategy:
      fail-fast: false  # Don't stop other jobs if one fails
      max-parallel: 3   # Use up to 3 runners in parallel
      matrix:
        include:
          - name: "main-build"
            primary: true
    permissions:
      contents: read
      packages: write
      actions: read
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      all-digests: ${{ steps.build.outputs.all-digests }}
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
      artifact-size: ${{ steps.build.outputs.artifact-size }}
    steps:
      - name: Checkout
        # renovate: datasource=github-tags depName=actions/checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Flux CLI
        # renovate: datasource=github-tags depName=fluxcd/flux2
        uses: v2.6.4 # main
        with:
          # renovate: datasource=github-releases depName=fluxcd/flux2
          version: 'v2.6.4'

      - name: Cache flux manifests
        id: cache
        # renovate: datasource=github-tags depName=actions/cache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: flux-manifests/
          key: ${{ needs.prepare.outputs.cache-key }}
          restore-keys: |
            flux-manifests-

      - name: Check cache status
        run: |
          if [[ "${{ steps.cache.outputs.cache-hit }}" == "true" ]]; then
            echo "✅ Cache hit! Using cached manifests"
          else
            echo "🔄 Cache miss - will build fresh artifacts"
          fi

      - name: Log in to Container Registry
        # renovate: datasource=github-tags depName=docker/login-action
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push OCI artifacts
        id: build
        run: |
          echo "🏗️ Building artifacts in parallel execution mode (${{ matrix.name }})"
          echo "🚀 Runner: ${{ runner.name }} | Primary: ${{ matrix.primary }}"

          # Create temporary directory for flux manifests
          mkdir -p flux-manifests

          # Copy kubernetes directory to temporary location
          cp -r kubernetes/ flux-manifests/

          # Calculate and display manifest size
          MANIFEST_SIZE=$(du -sh flux-manifests/ | cut -f1)
          MANIFEST_COUNT=$(find flux-manifests/ -name "*.yaml" -o -name "*.yml" | wc -l)
          echo "📦 Manifest size: $MANIFEST_SIZE ($MANIFEST_COUNT files)"
          echo "artifact-size=$MANIFEST_SIZE" >> $GITHUB_OUTPUT

          # Push to OCI registry using flux
          for tag in $(echo "${{ needs.prepare.outputs.tags }}" | tr ',' '\n'); do
            echo "🚀 Pushing artifact with tag: $tag (parallel job: ${{ matrix.name }})"

            # Push and capture output with digest
            if PUSH_OUTPUT=$(flux push artifact oci://$tag \
              --path="./flux-manifests" \
              --source="${{ github.repositoryUrl }}" \
              --revision="${{ github.sha }}" 2>&1); then

              echo "✅ Push successful: $PUSH_OUTPUT"

              # Extract digest from push output
              DIGEST=$(echo "$PUSH_OUTPUT" | grep -o 'sha256:[a-f0-9]\{64\}' | head -1)

              if [ -n "$DIGEST" ]; then
                # Store digest for signing
                echo "digest=$DIGEST" >> $GITHUB_OUTPUT
                echo "all-digests=${tag}@${DIGEST}" >> $GITHUB_OUTPUT
                echo "📝 Stored digest for $tag: $DIGEST"
              else
                echo "⚠️ Warning: No digest found in push output for $tag"
                exit 1
              fi
            else
              echo "❌ Push failed for $tag: $PUSH_OUTPUT"
              exit 1
            fi
          done

          echo "🎉 Parallel build completed successfully!"

  sign-artifacts:
    needs: [prepare, validate-manifests, security-scan, build-artifacts]
    runs-on: oci-workflows-runner
    if: ${{ !cancelled() && needs.build-artifacts.result == 'success' && (github.event_name == 'push' || !inputs.skip_signing) }}
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    env:
      COSIGN_YES: true
    steps:
      - name: Install Cosign
        # renovate: datasource=github-tags depName=sigstore/cosign-installer
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2
        with:
          # renovate: datasource=github-releases depName=sigstore/cosign
          cosign-release: v2.5.3

      - name: Log in to Container Registry
        # renovate: datasource=github-tags depName=docker/login-action
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate build provenance attestation
        # renovate: datasource=github-tags depName=actions/attest-build-provenance
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
        if: needs.build-artifacts.outputs.image-digest != ''
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ needs.build-artifacts.outputs.image-digest }}
          push-to-registry: true

      - name: Sign OCI artifacts
        run: |
          echo "🔐 Starting artifact signing process..."
          echo "🔧 Environment: COSIGN_YES=$COSIGN_YES"

          # Get digest from build output
          DIGEST="${{ needs.build-artifacts.outputs.image-digest }}"
          TAG=$(echo "${{ needs.prepare.outputs.tags }}" | head -1)

          if [ -n "$DIGEST" ] && [ "$DIGEST" != "null" ]; then
            echo "✍️ Signing with digest: $TAG@$DIGEST"
            cosign sign --yes "$TAG@$DIGEST"
            echo "✅ Successfully signed: $TAG@$DIGEST"
          else
            echo "⚠️ Warning: No digest found, signing with tag (not recommended)"
            cosign sign --yes "$TAG"
            echo "✅ Successfully signed (tag): $TAG"
          fi

          echo "🎉 Artifact signed successfully!"

      - name: Clean up cache
        run: |
          echo "🧹 Cleaning up flux-manifests cache after successful signing..."
          rm -rf flux-manifests/ || true
          echo "✅ OCI artifacts built, signed and cache cleaned!"

          # Summary report
          echo "📊 Workflow Summary:"
          echo "• Artifacts size: ${{ needs.build-artifacts.outputs.artifact-size }}"
          echo "• Cache hit: ${{ needs.build-artifacts.outputs.cache-hit }}"
          echo "• Signing: ${{ inputs.skip_signing && 'Skipped' || 'Completed' }}"
          echo "• Force rebuild: ${{ inputs.force_rebuild }}"

  summary:
    if: always()
    needs: [prepare, validate-manifests, security-scan, build-artifacts, sign-artifacts]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Generate workflow summary
        run: |
          echo "# 📦 Flux OCI Artifacts Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ⚡ Parallel Execution" >> $GITHUB_STEP_SUMMARY
          echo "This workflow executed the following jobs in parallel:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 **validate-manifests** - Kubernetes manifest validation" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 **security-scan** - Security checks and vulnerability scanning" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ **build-artifacts** - OCI artifact building and pushing" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔐 **sign-artifacts** executed after parallel jobs completed" >> $GITHUB_STEP_SUMMARY
          echo "📋 Flux webhook receiver handles automatic reconciliation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 🏗️ Build Results" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Manifest Size | ${{ needs.build-artifacts.outputs.artifact-size || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Cache Hit | ${{ needs.build-artifacts.outputs.cache-hit == 'true' && '✅ Yes' || '❌ No' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Validation | ${{ needs.validate-manifests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Signing | ${{ inputs.skip_signing && '⏭️ Skipped' || (needs.sign-artifacts.result == 'success' && '✅ Completed' || '❌ Failed') }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Force Rebuild | ${{ inputs.force_rebuild && '✅ Yes' || '❌ No' }} |" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔒 Security Scan Details" >> $GITHUB_STEP_SUMMARY
          echo "| Security Check | Count | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Privileged Containers | ${{ needs.security-scan.outputs.privileged-containers || '0' }} | ${{ needs.security-scan.outputs.privileged-containers == '0' && '✅ Safe' || '⚠️ Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Host Network Usage | ${{ needs.security-scan.outputs.host-network || '0' }} | ${{ needs.security-scan.outputs.host-network == '0' && '✅ Safe' || '⚠️ Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Root User Containers | ${{ needs.security-scan.outputs.root-users || '0' }} | ${{ needs.security-scan.outputs.root-users == '0' && '✅ Safe' || '⚠️ Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Security Summary:** ${{ needs.security-scan.outputs.security-summary || 'No security scan data available' }}" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🏷️ Generated Tags" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.prepare.outputs.tags }}" | tr ',' '\n' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.build-artifacts.outputs.all-digests }}" != "" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 🔍 Artifact Digests" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "${{ needs.build-artifacts.outputs.all-digests }}" | tr ',' '\n' >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
