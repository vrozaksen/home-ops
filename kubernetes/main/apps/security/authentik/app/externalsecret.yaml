---
# yaml-language-server: $schema=https://kube-schemas.pages.dev/external-secrets.io/externalsecret_v1beta1.json
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: &name authentik-secret
spec:
  refreshInterval: 15m
  target:
    name: *name
    template:
      engineVersion: v2
      data:
        # Authentik
        AUTHENTIK_BOOTSTRAP_EMAIL: '{{ .AUTHENTIK_EMAIL }}'
        AUTHENTIK_BOOTSTRAP_PASSWORD: '{{ .AUTHENTIK_PASSWORD }}'
        AUTHENTIK_BOOTSTRAP_TOKEN: '{{ .AUTHENTIK_TOKEN }}'
        AUTHENTIK_SECRET_KEY: '{{ .AUTHENTIK_SECRET_KEY }}'
        AUTHENTIK_REDIS__DB: "1"
        ## Database
        #AUTHENTIK_POSTGRESQL__NAME: &dbname '{{ .AUTHENTIK_POSTGRESQL__NAME }}'
        #AUTHENTIK_POSTGRESQL__HOST: &dbhost '{{ .AUTHENTIK_POSTGRESQL__HOST }}' #pgBouncer is set to session for Grafana, and Authentik requires transaction
        #AUTHENTIK_POSTGRESQL__USER: '{{ .AUTHENTIK_POSTGRESQL__USER }}'
        #AUTHENTIK_POSTGRESQL__PASSWORD: '{{ .AUTHENTIK_POSTGRESQL__PASSWORD }}'
        #AUTHENTIK_POSTGRESQL__SSLMODE: '{{ .AUTHENTIK_POSTGRESQL__SSLMODE }}'
        ## Postgres Init
        #INIT_POSTGRES_HOST: *dbhost
        #INIT_POSTGRES_DBNAME: *dbname
        #INIT_POSTGRES_USER: "{{ .AUTHENTIK_POSTGRESQL__USER }}"
        #INIT_POSTGRES_PASS: "{{ .AUTHENTIK_POSTGRESQL__PASSWORD }}"
        #INIT_POSTGRES_SUPER_PASS: "{{ .POSTGRES_ADMIN_PASS }}" # depracted
        # Email
        AUTHENTIK_EMAIL__HOST: '{{ .SMTP_HOST }}'
        AUTHENTIK_EMAIL__PORT: "587"
        AUTHENTIK_EMAIL__USERNAME: '{{ .SMTP_USER }}'
        AUTHENTIK_EMAIL__PASSWORD: '{{ .SMTP_PASS }}'
        AUTHENTIK_EMAIL__USE_TLS: "true"
        AUTHENTIK_EMAIL__USE_SSL: "false"
        AUTHENTIK_EMAIL__TIMEOUT: "10"
        AUTHENTIK_EMAIL__FROM: "authentik@${SECRET_DOMAIN}"
        # DB
        AUTHENTIK_POSTGRESQL__NAME: '{{ .dbname }}'
        AUTHENTIK_POSTGRESQL__HOST: '{{ .host }}' #pgBouncer is set to session for Grafana, and Authentik requires transaction
        AUTHENTIK_POSTGRESQL__USER: '{{ .user }}'
        AUTHENTIK_POSTGRESQL__PASSWORD: '{{ .password }}'
        AUTHENTIK_POSTGRESQL__USE_PGBOUNCER: 'false'
        AUTHENTIK_POSTGRESQL__SSLMODE: 'require'
  dataFrom:
  - extract:
      key: authentik
    sourceRef:
       storeRef:
         kind: ClusterSecretStore
         name: bitwarden-secrets-manager
  - extract:
      key: protonmail
    sourceRef:
       storeRef:
         kind: ClusterSecretStore
         name: bitwarden-secrets-manager
  - extract:
      key: postgres-pguser-authentik
    sourceRef:
       storeRef:
         kind: ClusterSecretStore
         name: crunchy-pgo-secrets
